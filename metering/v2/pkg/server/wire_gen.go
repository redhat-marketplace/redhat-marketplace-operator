// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/redhat-marketplace/redhat-marketplace-operator/metering/v2/internal/metrics"
	"github.com/redhat-marketplace/redhat-marketplace-operator/metering/v2/pkg/engine"
	"github.com/redhat-marketplace/redhat-marketplace-operator/metering/v2/pkg/processors"
	"sigs.k8s.io/controller-runtime/pkg/client/config"
	"time"
)

import (
	_ "k8s.io/client-go/plugin/pkg/client/auth"
)

// Injectors from wire.go:

func NewServer(opts *Options) (*Service, error) {
	registry := provideRegistry()
	context := provideContext()
	namespaces := ProvideNamespaces(opts)
	scheme := provideScheme()
	restConfig, err := config.GetConfig()
	if err != nil {
		return nil, err
	}
	clientOptions := getClientOptions()
	logger := _wireLoggerValue
	prometheusData := metrics.ProvidePrometheusData()
	statusFlushDuration := _wireStatusFlushDurationValue
	engineEngine, err := engine.NewEngine(context, namespaces, scheme, restConfig, clientOptions, logger, prometheusData, statusFlushDuration)
	if err != nil {
		return nil, err
	}
	cluster, err := provideCluster(restConfig, scheme)
	if err != nil {
		return nil, err
	}
	service := &Service{
		opts:            opts,
		metricsRegistry: registry,
		engine:          engineEngine,
		prometheusData:  prometheusData,
		cluster:         cluster,
	}
	return service, nil
}

var (
	_wireLoggerValue              = log
	_wireStatusFlushDurationValue = processors.StatusFlushDuration(time.Minute)
)
