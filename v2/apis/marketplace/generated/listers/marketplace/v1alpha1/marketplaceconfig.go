/*
Copyright 2020 IBM Co..

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/redhat-marketplace/redhat-marketplace-operator/v2/apis/marketplace/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MarketplaceConfigLister helps list MarketplaceConfigs.
// All objects returned here must be treated as read-only.
type MarketplaceConfigLister interface {
	// List lists all MarketplaceConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MarketplaceConfig, err error)
	// MarketplaceConfigs returns an object that can list and get MarketplaceConfigs.
	MarketplaceConfigs(namespace string) MarketplaceConfigNamespaceLister
	MarketplaceConfigListerExpansion
}

// marketplaceConfigLister implements the MarketplaceConfigLister interface.
type marketplaceConfigLister struct {
	indexer cache.Indexer
}

// NewMarketplaceConfigLister returns a new MarketplaceConfigLister.
func NewMarketplaceConfigLister(indexer cache.Indexer) MarketplaceConfigLister {
	return &marketplaceConfigLister{indexer: indexer}
}

// List lists all MarketplaceConfigs in the indexer.
func (s *marketplaceConfigLister) List(selector labels.Selector) (ret []*v1alpha1.MarketplaceConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MarketplaceConfig))
	})
	return ret, err
}

// MarketplaceConfigs returns an object that can list and get MarketplaceConfigs.
func (s *marketplaceConfigLister) MarketplaceConfigs(namespace string) MarketplaceConfigNamespaceLister {
	return marketplaceConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MarketplaceConfigNamespaceLister helps list and get MarketplaceConfigs.
// All objects returned here must be treated as read-only.
type MarketplaceConfigNamespaceLister interface {
	// List lists all MarketplaceConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MarketplaceConfig, err error)
	// Get retrieves the MarketplaceConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MarketplaceConfig, error)
	MarketplaceConfigNamespaceListerExpansion
}

// marketplaceConfigNamespaceLister implements the MarketplaceConfigNamespaceLister
// interface.
type marketplaceConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MarketplaceConfigs in the indexer for a given namespace.
func (s marketplaceConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MarketplaceConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MarketplaceConfig))
	})
	return ret, err
}

// Get retrieves the MarketplaceConfig from the indexer for a given namespace and name.
func (s marketplaceConfigNamespaceLister) Get(name string) (*v1alpha1.MarketplaceConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("marketplaceconfig"), name)
	}
	return obj.(*v1alpha1.MarketplaceConfig), nil
}
