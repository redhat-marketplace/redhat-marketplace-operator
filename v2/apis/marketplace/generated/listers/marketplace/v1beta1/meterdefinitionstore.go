/*
Copyright 2020 IBM Co..

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/redhat-marketplace/redhat-marketplace-operator/v2/apis/marketplace/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MeterdefinitionStoreLister helps list MeterdefinitionStores.
// All objects returned here must be treated as read-only.
type MeterdefinitionStoreLister interface {
	// List lists all MeterdefinitionStores in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.MeterdefinitionStore, err error)
	// MeterdefinitionStores returns an object that can list and get MeterdefinitionStores.
	MeterdefinitionStores(namespace string) MeterdefinitionStoreNamespaceLister
	MeterdefinitionStoreListerExpansion
}

// meterdefinitionStoreLister implements the MeterdefinitionStoreLister interface.
type meterdefinitionStoreLister struct {
	indexer cache.Indexer
}

// NewMeterdefinitionStoreLister returns a new MeterdefinitionStoreLister.
func NewMeterdefinitionStoreLister(indexer cache.Indexer) MeterdefinitionStoreLister {
	return &meterdefinitionStoreLister{indexer: indexer}
}

// List lists all MeterdefinitionStores in the indexer.
func (s *meterdefinitionStoreLister) List(selector labels.Selector) (ret []*v1beta1.MeterdefinitionStore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.MeterdefinitionStore))
	})
	return ret, err
}

// MeterdefinitionStores returns an object that can list and get MeterdefinitionStores.
func (s *meterdefinitionStoreLister) MeterdefinitionStores(namespace string) MeterdefinitionStoreNamespaceLister {
	return meterdefinitionStoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MeterdefinitionStoreNamespaceLister helps list and get MeterdefinitionStores.
// All objects returned here must be treated as read-only.
type MeterdefinitionStoreNamespaceLister interface {
	// List lists all MeterdefinitionStores in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.MeterdefinitionStore, err error)
	// Get retrieves the MeterdefinitionStore from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.MeterdefinitionStore, error)
	MeterdefinitionStoreNamespaceListerExpansion
}

// meterdefinitionStoreNamespaceLister implements the MeterdefinitionStoreNamespaceLister
// interface.
type meterdefinitionStoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MeterdefinitionStores in the indexer for a given namespace.
func (s meterdefinitionStoreNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.MeterdefinitionStore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.MeterdefinitionStore))
	})
	return ret, err
}

// Get retrieves the MeterdefinitionStore from the indexer for a given namespace and name.
func (s meterdefinitionStoreNamespaceLister) Get(name string) (*v1beta1.MeterdefinitionStore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("meterdefinitionstore"), name)
	}
	return obj.(*v1beta1.MeterdefinitionStore), nil
}
