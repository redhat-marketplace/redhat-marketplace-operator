package rectest

// Code generated by github.com/launchdarkly/go-options.  DO NOT EDIT.

import "fmt"

import (
	"sigs.k8s.io/controller-runtime/pkg/client"
)

import "github.com/google/go-cmp/cmp"

type ApplyListStepOptionFunc func(c *listStepOptions) error

func (f ApplyListStepOptionFunc) apply(c *listStepOptions) error {
	return f(c)
}

func newListStepOptions(options ...ListStepOption) (listStepOptions, error) {
	var c listStepOptions
	err := applyListStepOptionsOptions(&c, options...)
	return c, err
}

func applyListStepOptionsOptions(c *listStepOptions, options ...ListStepOption) error {
	c.CheckResult = IgnoreList
	for _, o := range options {
		if err := o.apply(c); err != nil {
			return err
		}
	}
	return nil
}

type ListStepOption interface {
	apply(*listStepOptions) error
}

type listWithObjImpl struct {
	o client.ObjectList
}

func (o listWithObjImpl) apply(c *listStepOptions) error {
	c.Obj = o.o
	return nil
}

func (o listWithObjImpl) Equal(v listWithObjImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o listWithObjImpl) String() string {
	name := "ListWithObj"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func ListWithObj(o client.ObjectList) ListStepOption {
	return listWithObjImpl{
		o: o,
	}
}

type listWithFilterImpl struct {
	o []client.ListOption
}

func (o listWithFilterImpl) apply(c *listStepOptions) error {
	c.Filter = o.o
	return nil
}

func (o listWithFilterImpl) Equal(v listWithFilterImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o listWithFilterImpl) String() string {
	name := "ListWithFilter"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func ListWithFilter(o ...client.ListOption) ListStepOption {
	return listWithFilterImpl{
		o: o,
	}
}

type listWithCheckResultImpl struct {
	o ReconcilerTestListValidationFunc
}

func (o listWithCheckResultImpl) apply(c *listStepOptions) error {
	c.CheckResult = o.o
	return nil
}

func (o listWithCheckResultImpl) Equal(v listWithCheckResultImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o listWithCheckResultImpl) String() string {
	name := "ListWithCheckResult"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func ListWithCheckResult(o ReconcilerTestListValidationFunc) ListStepOption {
	return listWithCheckResultImpl{
		o: o,
	}
}
