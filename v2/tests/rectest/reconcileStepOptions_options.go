package rectest

// Code generated by github.com/launchdarkly/go-options.  DO NOT EDIT.

import "fmt"

import "github.com/google/go-cmp/cmp"

type ApplyReconcileStepOptionFunc func(c *reconcileStepOptions) error

func (f ApplyReconcileStepOptionFunc) apply(c *reconcileStepOptions) error {
	return f(c)
}

func newReconcileStepOptions(options ...ReconcileStepOption) (reconcileStepOptions, error) {
	var c reconcileStepOptions
	err := applyReconcileStepOptionsOptions(&c, options...)
	return c, err
}

func applyReconcileStepOptionsOptions(c *reconcileStepOptions, options ...ReconcileStepOption) error {
	for _, o := range options {
		if err := o.apply(c); err != nil {
			return err
		}
	}
	return nil
}

type ReconcileStepOption interface {
	apply(*reconcileStepOptions) error
}

type reconcileWithExpectedResultsImpl struct {
	o []ReconcileResult
}

func (o reconcileWithExpectedResultsImpl) apply(c *reconcileStepOptions) error {
	c.ExpectedResults = o.o
	return nil
}

func (o reconcileWithExpectedResultsImpl) Equal(v reconcileWithExpectedResultsImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o reconcileWithExpectedResultsImpl) String() string {
	name := "ReconcileWithExpectedResults"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func ReconcileWithExpectedResults(o ...ReconcileResult) ReconcileStepOption {
	return reconcileWithExpectedResultsImpl{
		o: o,
	}
}

type reconcileWithUntilDoneImpl struct {
	o bool
}

func (o reconcileWithUntilDoneImpl) apply(c *reconcileStepOptions) error {
	c.UntilDone = o.o
	return nil
}

func (o reconcileWithUntilDoneImpl) Equal(v reconcileWithUntilDoneImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o reconcileWithUntilDoneImpl) String() string {
	name := "ReconcileWithUntilDone"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func ReconcileWithUntilDone(o bool) ReconcileStepOption {
	return reconcileWithUntilDoneImpl{
		o: o,
	}
}

type reconcileWithMaxImpl struct {
	o int
}

func (o reconcileWithMaxImpl) apply(c *reconcileStepOptions) error {
	c.Max = o.o
	return nil
}

func (o reconcileWithMaxImpl) Equal(v reconcileWithMaxImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o reconcileWithMaxImpl) String() string {
	name := "ReconcileWithMax"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func ReconcileWithMax(o int) ReconcileStepOption {
	return reconcileWithMaxImpl{
		o: o,
	}
}

type reconcileWithIgnoreErrorImpl struct {
	o bool
}

func (o reconcileWithIgnoreErrorImpl) apply(c *reconcileStepOptions) error {
	c.IgnoreError = o.o
	return nil
}

func (o reconcileWithIgnoreErrorImpl) Equal(v reconcileWithIgnoreErrorImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o reconcileWithIgnoreErrorImpl) String() string {
	name := "ReconcileWithIgnoreError"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func ReconcileWithIgnoreError(o bool) ReconcileStepOption {
	return reconcileWithIgnoreErrorImpl{
		o: o,
	}
}
