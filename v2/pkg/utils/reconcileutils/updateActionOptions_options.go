package reconcileutils

// Code generated by github.com/launchdarkly/go-options.  DO NOT EDIT.

import "fmt"

import (
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/utils/patch"
)

import "github.com/google/go-cmp/cmp"

type ApplyUpdateActionOptionFunc func(c *updateActionOptions) error

func (f ApplyUpdateActionOptionFunc) apply(c *updateActionOptions) error {
	return f(c)
}

func newUpdateActionOptions(options ...UpdateActionOption) (updateActionOptions, error) {
	var c updateActionOptions
	err := applyUpdateActionOptionsOptions(&c, options...)
	return c, err
}

func applyUpdateActionOptionsOptions(c *updateActionOptions, options ...UpdateActionOption) error {
	for _, o := range options {
		if err := o.apply(c); err != nil {
			return err
		}
	}
	return nil
}

type UpdateActionOption interface {
	apply(*updateActionOptions) error
}

type updateStatusOnlyImpl struct {
	o bool
}

func (o updateStatusOnlyImpl) apply(c *updateActionOptions) error {
	c.StatusOnly = o.o
	return nil
}

func (o updateStatusOnlyImpl) Equal(v updateStatusOnlyImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o updateStatusOnlyImpl) String() string {
	name := "UpdateStatusOnly"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func UpdateStatusOnly(o bool) UpdateActionOption {
	return updateStatusOnlyImpl{
		o: o,
	}
}

type updateWithPatchImpl struct {
	o patch.PatchAnnotator
}

func (o updateWithPatchImpl) apply(c *updateActionOptions) error {
	c.WithPatch = o.o
	return nil
}

func (o updateWithPatchImpl) Equal(v updateWithPatchImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o updateWithPatchImpl) String() string {
	name := "UpdateWithPatch"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func UpdateWithPatch(o patch.PatchAnnotator) UpdateActionOption {
	return updateWithPatchImpl{
		o: o,
	}
}
