package reconcileutils

// Code generated by github.com/launchdarkly/go-options.  DO NOT EDIT.

import "fmt"

import (
	"sigs.k8s.io/controller-runtime/pkg/client"
)

import "github.com/google/go-cmp/cmp"

type ApplyDeleteActionOptionFunc func(c *deleteActionOptions) error

func (f ApplyDeleteActionOptionFunc) apply(c *deleteActionOptions) error {
	return f(c)
}

func newDeleteActionOptions(options ...DeleteActionOption) (deleteActionOptions, error) {
	var c deleteActionOptions
	err := applyDeleteActionOptionsOptions(&c, options...)
	return c, err
}

func applyDeleteActionOptionsOptions(c *deleteActionOptions, options ...DeleteActionOption) error {
	for _, o := range options {
		if err := o.apply(c); err != nil {
			return err
		}
	}
	return nil
}

type DeleteActionOption interface {
	apply(*deleteActionOptions) error
}

type deleteWithDeleteOptionsImpl struct {
	o []client.DeleteOption
}

func (o deleteWithDeleteOptionsImpl) apply(c *deleteActionOptions) error {
	c.WithDeleteOptions = o.o
	return nil
}

func (o deleteWithDeleteOptionsImpl) Equal(v deleteWithDeleteOptionsImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o deleteWithDeleteOptionsImpl) String() string {
	name := "DeleteWithDeleteOptions"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func DeleteWithDeleteOptions(o ...client.DeleteOption) DeleteActionOption {
	return deleteWithDeleteOptionsImpl{
		o: o,
	}
}
