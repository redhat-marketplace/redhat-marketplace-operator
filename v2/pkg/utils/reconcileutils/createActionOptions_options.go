package reconcileutils

// Code generated by github.com/launchdarkly/go-options.  DO NOT EDIT.

import "fmt"

import (
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/utils/patch"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

import "github.com/google/go-cmp/cmp"

type ApplyCreateActionOptionFunc func(c *createActionOptions) error

func (f ApplyCreateActionOptionFunc) apply(c *createActionOptions) error {
	return f(c)
}

func newCreateActionOptions(options ...CreateActionOption) (createActionOptions, error) {
	var c createActionOptions
	err := applyCreateActionOptionsOptions(&c, options...)
	return c, err
}

func applyCreateActionOptionsOptions(c *createActionOptions, options ...CreateActionOption) error {
	c.WithAddOwner = nil
	c.WithAddController = nil
	for _, o := range options {
		if err := o.apply(c); err != nil {
			return err
		}
	}
	return nil
}

type CreateActionOption interface {
	apply(*createActionOptions) error
}

type createWithPatchImpl struct {
	o patch.PatchAnnotator
}

func (o createWithPatchImpl) apply(c *createActionOptions) error {
	c.WithPatch = o.o
	return nil
}

func (o createWithPatchImpl) Equal(v createWithPatchImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o createWithPatchImpl) String() string {
	name := "CreateWithPatch"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func CreateWithPatch(o patch.PatchAnnotator) CreateActionOption {
	return createWithPatchImpl{
		o: o,
	}
}

type createWithAddOwnerImpl struct {
	o client.Object
}

func (o createWithAddOwnerImpl) apply(c *createActionOptions) error {
	c.WithAddOwner = o.o
	return nil
}

func (o createWithAddOwnerImpl) Equal(v createWithAddOwnerImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o createWithAddOwnerImpl) String() string {
	name := "CreateWithAddOwner"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func CreateWithAddOwner(o client.Object) CreateActionOption {
	return createWithAddOwnerImpl{
		o: o,
	}
}

type createWithAddControllerImpl struct {
	o client.Object
}

func (o createWithAddControllerImpl) apply(c *createActionOptions) error {
	c.WithAddController = o.o
	return nil
}

func (o createWithAddControllerImpl) Equal(v createWithAddControllerImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o createWithAddControllerImpl) String() string {
	name := "CreateWithAddController"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func CreateWithAddController(o client.Object) CreateActionOption {
	return createWithAddControllerImpl{
		o: o,
	}
}
