# Generated by internal/ci/ci_tool.cue; do not edit
name: Branch Build
on:
  push:
    branches:
    - master
    - release/**
    - hotfix/**
    - develop
    - feature/**
    - bugfix/**
env:
  IMAGE_REGISTRY: quay.io/rh-marketplace
jobs:
  test:
    name: Test
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Cancel Previous Run
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
        cache: false
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder Assets
      run: |-
        make envtest
        make source-envtest
    - name: Report Outdated Modules
      run: |-
        make go-mod-outdated-all    
    - name: WhiteSource Unified Agent Scan
      env:
        WS_APIKEY: ${{secrets.WS_APIKEY}}
        WS_USERKEY: ${{secrets.WS_USERKEY}}
        WS_WSS_URL: https://ibmets.whitesourcesoftware.com/agent
        WS_PRODUCTNAME: PSIRT_PRD0011140
        WS_PROJECTNAME: ${{github.event.repository.name}}
      run: |
        echo Downloading WhiteSource Unified Agent
        curl -LJO https://unified-agent.s3.amazonaws.com/wss-unified-agent.jar
        if [[ "$(curl -sL https://unified-agent.s3.amazonaws.com/wss-unified-agent.jar.sha256)" != "$(sha256sum wss-unified-agent.jar)" ]] ; then
          echo "Integrity Check Failed"
        else
          echo "Integrity Check Passed"
          echo Starting WhiteSource Scan
          java -jar wss-unified-agent.jar
        fi
  matrix-test:
    name: Matrix Test
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
        cache: false
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder Assets
      run: |-
        make envtest
        make source-envtest
    - name: Test
      run: make ${{ matrix.project }}/test
    strategy:
      matrix:
        project:
        - authchecker
        - metering
        - reporter
        - operator
        - deployer
        - datareporter
  images:
    name: Build Images
    runs-on: ubuntu-20.04
    env:
      GO_VERSION: 1.19
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
        cache: false
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        image: tonistiigi/binfmt:qemu-v6.1.0
        platforms: all
    - id: buildx
      name: Set up docker buildx
      uses: docker/setup-buildx-action@v2
      with:
        config: .github/buildkitd.toml
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder Assets
      run: |-
        make envtest
        make source-envtest
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: quay.io/rh-marketplace
        username: ${{secrets['quayUser']}}
        password: ${{secrets['quayPassword']}}
    - id: version
      name: Get Version
      run: |-
        make svu
        export VERSION="$(./bin/svu next --prefix '')"

        if [ "$REF" == "" ]; then
        	REF="$GITHUB_REF"
        fi

        if [[ "$GITHUB_HEAD_REF" != "" ]]; then
        	echo "Request is a PR $GITHUB_HEAD_REF is head; is base $GITHUB_BASE_REF is base"
        	REF="$GITHUB_HEAD_REF"
        fi

        echo "Found ref $REF"

        if [[ "$VERSION" == "" ]]; then
        	echo "failed to find version"
        	exit 1
        fi

        if [[ "$REF" == *"release"* ||  "$REF" == *"hotfix"* || "$REF" == *"refs/head/master"* || "$REF" == *"refs/head/develop"* ]] ; then
        echo "using release version and github_run_number"
        export VERSION=${VERSION}-${GITHUB_RUN_NUMBER}
        export TAG="${VERSION}"
        export IS_DEV="false"
        else
        echo "using beta in version"
        export VERSION=${VERSION}-beta.${GITHUB_RUN_NUMBER}
        export TAG="${VERSION}"
        export IS_DEV="true"
        fi

        echo "Found version $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Found tag $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "IS_DEV=$IS_DEV" >> $GITHUB_ENV
        echo "isDev=$IS_DEV" >> $GITHUB_OUTPUT
        echo "REF=$REF" >> $GITHUB_ENV
    - id: build
      name: Build and push images
      run: |-
        if [ "$IS_DEV" == "true" ]; then
        	export ARCHS="amd64"
        fi

        make clean-licenses save-licenses ${{ matrix.project }}/docker-build
      env:
        DOCKERBUILDXCACHE: /tmp/.buildx-cache
        IMAGE_PUSH: "true"
    strategy:
      matrix:
        project:
        - operator
        - authchecker
        - metering
        - reporter
        - airgap
        - deployer
        - datareporter
        include:
        - project: operator
        - project: authchecker
        - project: metering
        - project: reporter
        - project: airgap
        - project: deployer
        - project: datareporter
  deploy:
    name: Deploy
    needs:
    - test
    - matrix-test
    - images
    runs-on: ubuntu-20.04
    outputs:
      isDev: ${{ steps.bundle.outputs.isDev }}
      version: ${{ steps.bundle.outputs.version }}
      tag: ${{ steps.bundle.outputs.tag }}
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
        cache: false
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        image: tonistiigi/binfmt:qemu-v6.1.0
        platforms: all
    - id: buildx
      name: Set up docker buildx
      uses: docker/setup-buildx-action@v2
      with:
        config: .github/buildkitd.toml
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder Assets
      run: |-
        make envtest
        make source-envtest
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: quay.io/rh-marketplace
        username: ${{secrets['quayUser']}}
        password: ${{secrets['quayPassword']}}
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: registry.connect.redhat.com
        username: ${{secrets['REDHAT_IO_USER']}}
        password: ${{secrets['REDHAT_IO_PASSWORD']}}
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: registry.redhat.io
        username: ${{secrets['REDHAT_IO_USER']}}
        password: ${{secrets['REDHAT_IO_PASSWORD']}}
    - id: version
      name: Get Version
      run: |-
        make svu
        export VERSION="$(./bin/svu next --prefix '')"

        if [ "$REF" == "" ]; then
        	REF="$GITHUB_REF"
        fi

        if [[ "$GITHUB_HEAD_REF" != "" ]]; then
        	echo "Request is a PR $GITHUB_HEAD_REF is head; is base $GITHUB_BASE_REF is base"
        	REF="$GITHUB_HEAD_REF"
        fi

        echo "Found ref $REF"

        if [[ "$VERSION" == "" ]]; then
        	echo "failed to find version"
        	exit 1
        fi

        if [[ "$REF" == *"release"* ||  "$REF" == *"hotfix"* || "$REF" == *"refs/head/master"* || "$REF" == *"refs/head/develop"* ]] ; then
        echo "using release version and github_run_number"
        export VERSION=${VERSION}-${GITHUB_RUN_NUMBER}
        export TAG="${VERSION}"
        export IS_DEV="false"
        else
        echo "using beta in version"
        export VERSION=${VERSION}-beta.${GITHUB_RUN_NUMBER}
        export TAG="${VERSION}"
        export IS_DEV="true"
        fi

        echo "Found version $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Found tag $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "IS_DEV=$IS_DEV" >> $GITHUB_ENV
        echo "isDev=$IS_DEV" >> $GITHUB_OUTPUT
        echo "REF=$REF" >> $GITHUB_ENV
    - id: bundle
      name: Build bundle
      run: |-
        REF=`echo ${GITHUB_REF} | sed 's/refs\/head\///g' | sed 's/\//-/g'`
        echo "building $BRANCH with dev=$IS_DEV and version=$VERSION"

        cd v2
        export TAG=$IMAGE_TAG
        echo "::group::Make Stable Bundle"
        make bundle-stable
        echo "::endgroup::"

        export VERSION=$IMAGE_TAG
        echo "::group::Make Bundle Build"
        make bundle-build
        echo "::endgroup::"
        echo "::group::Make Dev Index"
        make bundle-dev-index-multiarch
        echo "::endgroup::"

        echo "isDev=$IS_DEV" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
      env:
        IMAGE_TAG: ${{ steps.version.outputs.tag }}
    - uses: actions/upload-artifact@v3
      with:
        name: release-bundle-${{ steps.bundle.outputs.tag }}
        path: v2/bundle
    - id: deployer-bundle
      name: Build deployer bundle
      run: |-
        REF=`echo ${GITHUB_REF} | sed 's/refs\/head\///g' | sed 's/\//-/g'`
        echo "building $BRANCH with dev=$IS_DEV and version=$VERSION"
        cd deployer/v2
        export TAG=$IMAGE_TAG
        echo "::group::Make Stable Bundle"
        make bundle-stable
        echo "::endgroup::"
        export VERSION=$IMAGE_TAG
        echo "::group::Make Bundle Build"
        make bundle-build
        echo "::endgroup::"
        echo "::group::Make Dev Index"
        make bundle-dev-index-multiarch
        echo "::endgroup::"
        echo "isDev=$IS_DEV" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
      env:
        IMAGE_TAG: ${{ steps.version.outputs.tag }}
    - uses: actions/upload-artifact@v3
      with:
        name: release-deployer-bundle-${{ steps.bundle.outputs.tag }}
        path: deployer/v2/bundle
    - id: datareporter-bundle
      name: Build datareporter bundle
      run: |-
        REF=`echo ${GITHUB_REF} | sed 's/refs\/head\///g' | sed 's/\//-/g'`
        echo "building $BRANCH with dev=$IS_DEV and version=$VERSION"
        cd datareporter/v2
        export TAG=$IMAGE_TAG
        echo "::group::Make Stable Bundle"
        make bundle-stable
        echo "::endgroup::"
        export VERSION=$IMAGE_TAG
        echo "::group::Make Bundle Build"
        make bundle-build
        echo "::endgroup::"
        echo "::group::Make Dev Index"
        make bundle-dev-index-multiarch
        echo "::endgroup::"
        echo "isDev=$IS_DEV" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
      env:
        IMAGE_TAG: ${{ steps.version.outputs.tag }}
    - uses: actions/upload-artifact@v3
      with:
        name: release-datareporter-bundle-${{ steps.bundle.outputs.tag }}
        path: datareporter/v2/bundle
    - uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: devindex
        recreate: "true"
        message: |-
          Available to test on openshift using a catalogsource:

          ``` yaml
          apiVersion: operators.coreos.com/v1alpha1
          kind: CatalogSource
          metadata:
            name: ibm-metrics-operator-test
            namespace: openshift-marketplace
          spec:
            displayName: IBM Metrics Operator Test
            image: quay.io/rh-marketplace/ibm-metrics-operator-dev-index:${{ env.TAG }}
            publisher: ''
            sourceType: grpc
          ---
          apiVersion: operators.coreos.com/v1alpha1
          kind: CatalogSource
          metadata:
            name: rhm-operator-test
            namespace: openshift-marketplace
          spec:
            displayName: RHM Operator Test
            image: quay.io/rh-marketplace/redhat-marketplace-operator-dev-index:${{ env.TAG }}
            publisher: ''
            sourceType: grpc
          ---
          apiVersion: operators.coreos.com/v1alpha1
          kind: CatalogSource
          metadata:
            name: ibm-data-reporter-operator-test
            namespace: openshift-marketplace
          spec:
            displayName: IBM Data Reporter Operator Test
            image: quay.io/rh-marketplace/ibm-data-reporter-operator-dev-index:${{ env.TAG }}
            publisher: ''
            sourceType: grpc
          ```
