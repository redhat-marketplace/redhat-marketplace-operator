# Generated by internal/ci/ci_tool.cue; do not edit
name: Branch Build
on:
  push:
    branches:
    - master
    - release/**
    - hotfix/**
    - develop
    - feature/**
    - bugfix/**
env:
  IMAGE_REGISTRY: quay.io/rh-marketplace
jobs:
  test:
    name: Test
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.version.outputs.version }}
      isDev: ${{ steps.version.outputs.isDev }}
      tag: ${{ steps.version.outputs.tag }}
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Cancel Previous Run
      uses: styfle/cancel-workflow-action@0.4.1
      with:
        access_token: ${{ github.token }}
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.2
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder
      run: |-
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        version=2.3.1

        # download kubebuilder and extract it to tmp
        curl -L https://go.kubebuilder.io/dl/${version}/${os}/${arch} | tar -xz -C /tmp/

        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_${version}_${os}_${arch} /usr/local/kubebuilder
        echo "/usr/local/kubebuilder/bin" >> $GITHUB_PATH
    - name: Test
      run: make operator/test
    - id: version
      name: Get Version
      run: |-
        make svu
        export VERSION="$(./bin/svu next)"

        if [ "$REF" == "" ]; then
        	REF="$GITHUB_REF"
        fi

        if [[ "$GITHUB_HEAD_REF" != "" ]]; then
        	echo "Request is a PR $GITHUB_HEAD_REF is head; is base $GITHUB_BASE_REF is base"
          REF="$GITHUB_HEAD_REF"
        fi

        echo "Found ref $REF"

        if [[ "$VERSION" == "" ]]; then
          echo "failed to find version"
          exit 1
        fi

        if [[ "$REF" == *"release"* ||  "$REF" == *"hotfix"* ]] ; then
        echo "using release version and github_run_number"
        export TAG="${VERSION}-${GITHUB_RUN_NUMBER}"
        export IS_DEV="false"
        else
        echo "using beta in version"
        export TAG="${VERSION}-beta-${GITHUB_RUN_NUMBER}"
        export IS_DEV="true"
        fi

        echo "Found version $VERSION"
        echo "::set-output name=version::$VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Found tag $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "::set-output name=tag::$TAG"
        echo "IS_DEV=$IS_DEV" >> $GITHUB_ENV
        echo "::set-output name=isDev::$IS_DEV"
        echo "REF=$REF" >> $GITHUB_ENV
  matrix-test:
    name: Matrix Test
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.2
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder
      run: |-
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        version=2.3.1

        # download kubebuilder and extract it to tmp
        curl -L https://go.kubebuilder.io/dl/${version}/${os}/${arch} | tar -xz -C /tmp/

        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_${version}_${os}_${arch} /usr/local/kubebuilder
        echo "/usr/local/kubebuilder/bin" >> $GITHUB_PATH
    - name: Test
      run: make ${{ matrix.project }}/test
    strategy:
      matrix:
        project:
        - authchecker
        - metering
        - reporter
        - tests
  base:
    name: Build Base
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.2
    - name: Cache Docker Buildx
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-base-${{ github.sha }}
        restore-keys: ${{ runner.os }}-buildx-base-
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - id: buildx
      name: Set up docker buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        registry: quay.io/rh-marketplace
        username: ${{secrets['quayUser']}}
        password: ${{secrets['quayPassword']}}
    - id: build
      name: Build images
      run: make base/docker-build
      env:
        DOCKERBUILDXCACHE: /tmp/.buildx-cache
        PUSH: "false"
      continue-on-error: ${{ matrix.continueOnError }}
    - id: push
      name: Push images
      run: make base/docker-build
      env:
        DOCKERBUILDXCACHE: /tmp/.buildx-cache
        IMAGE_PUSH: "true"
      continue-on-error: ${{ matrix.continueOnError }}
  images:
    name: Build Images
    needs:
    - test
    - base
    runs-on: ubuntu-20.04
    env:
      VERSION: ${{ needs.test.outputs.tag }}
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - id: buildx
      name: Set up docker buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Cache Docker Buildx
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ matrix.project }}-${{ github.sha }}
        restore-keys: ${{ runner.os }}-buildx-${{ matrix.project }}-
    - name: Install Kubebuilder
      run: |-
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        version=2.3.1

        # download kubebuilder and extract it to tmp
        curl -L https://go.kubebuilder.io/dl/${version}/${os}/${arch} | tar -xz -C /tmp/

        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_${version}_${os}_${arch} /usr/local/kubebuilder
        echo "/usr/local/kubebuilder/bin" >> $GITHUB_PATH
    - name: Install operatorsdk
      run: |-
        export ARCH=$(case $(arch) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(arch) ;; esac)
        export OS=$(uname | awk '{print tolower($0)}')
        export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/latest/download
        curl -LO ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH}
        curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt
        curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt.asc
        grep operator-sdk_${OS}_${ARCH} checksums.txt | sha256sum -c -
        chmod +x operator-sdk_${OS}_${ARCH} && sudo mv operator-sdk_${OS}_${ARCH} /usr/local/bin/operator-sdk
        curl -LO https://github.com/operator-framework/operator-registry/releases/download/v1.15.3/${OS}-${ARCH}-opm
        chmod +x ${OS}-${ARCH}-opm && sudo mv ${OS}-${ARCH}-opm /usr/local/bin/opm
    - name: Install YQ
      run: sudo snap install yq
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        registry: quay.io/rh-marketplace
        username: ${{secrets['quayUser']}}
        password: ${{secrets['quayPassword']}}
    - id: build
      name: Build images
      run: make clean-licenses save-licenses ${{ matrix.project }}/docker-build
      env:
        DOCKERBUILDXCACHE: /tmp/.buildx-cache
        IMAGE_PUSH: "false"
      continue-on-error: ${{ matrix.continueOnError }}
    - id: push
      name: Push images
      run: make ${{ matrix.project }}/docker-build
      env:
        DOCKERBUILDXCACHE: /tmp/.buildx-cache
        PUSH: "true"
      continue-on-error: ${{ matrix.continueOnError }}
    strategy:
      matrix:
        project:
        - operator
        - authchecker
        - metering
        - reporter
        include:
        - project: operator
          continueOnError: false
        - project: authchecker
          continueOnError: false
        - project: metering
          continueOnError: false
        - project: reporter
          continueOnError: false
  deploy:
    name: Deploy
    needs:
    - test
    - matrix-test
    runs-on: ubuntu-20.04
    outputs:
      isDev: ${{ steps.bundle.outputs.isDev }}
      version: ${{ steps.bundle.outputs.version }}
      tag: ${{ steps.bundle.outputs.tag }}
    env:
      VERSION: ${{ needs.test.outputs.version }}
      IMAGE_TAG: ${{ needs.test.outputs.tag }}
      IS_DEV: ${{ needs.test.outputs.isDev }}
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - id: buildx
      name: Set up docker buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder
      run: |-
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        version=2.3.1

        # download kubebuilder and extract it to tmp
        curl -L https://go.kubebuilder.io/dl/${version}/${os}/${arch} | tar -xz -C /tmp/

        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_${version}_${os}_${arch} /usr/local/kubebuilder
        echo "/usr/local/kubebuilder/bin" >> $GITHUB_PATH
    - name: Install operatorsdk
      run: |-
        export ARCH=$(case $(arch) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(arch) ;; esac)
        export OS=$(uname | awk '{print tolower($0)}')
        export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/latest/download
        curl -LO ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH}
        curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt
        curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt.asc
        grep operator-sdk_${OS}_${ARCH} checksums.txt | sha256sum -c -
        chmod +x operator-sdk_${OS}_${ARCH} && sudo mv operator-sdk_${OS}_${ARCH} /usr/local/bin/operator-sdk
        curl -LO https://github.com/operator-framework/operator-registry/releases/download/v1.15.3/${OS}-${ARCH}-opm
        chmod +x ${OS}-${ARCH}-opm && sudo mv ${OS}-${ARCH}-opm /usr/local/bin/opm
    - name: Install YQ
      run: sudo snap install yq
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        registry: quay.io/rh-marketplace
        username: ${{secrets['quayUser']}}
        password: ${{secrets['quayPassword']}}
    - id: bundle
      name: Build bundle
      run: |-
        REF=`echo ${GITHUB_REF} | sed 's/refs\/head\///g' | sed 's/\//-/g'`
        echo "building $BRANCH with dev=$IS_DEV and version=$VERSION"

        cd v2
        export TAG=$IMAGE_TAG
        echo "::group::Make Stable Bundle"
        make bundle-stable
        echo "Current dir = `pwd`"
        cat bundle/manifests/redhat-marketplace-operator.clusterserviceversion.yaml
        echo "::endgroup::"

        export VERSION=$IMAGE_TAG
        echo "::group::Make Bundle Build"
        make bundle-build
        echo "::endgroup::"
        echo "::group::Make Dev Index"
        make bundle-dev-index-multiarch
        echo "::endgroup::"

        echo "::set-output name=isDev::$IS_DEV"
        echo "::set-output name=version::$VERSION"
        echo "::set-output name=tag::$TAG"
    - uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: devindex
        recreate: "true"
        message: |-
          Available to test on openshift using a catalogsource:

          ``` yaml
          apiVersion: operators.coreos.com/v1alpha1
          kind: CatalogSource
          metadata:
            name: rhm-test
            namespace: openshift-marketplace
          spec:
            displayName: RHM Test
            image: quay.io/rh-marketplace/redhat-marketplace-operator-dev-index:${{ env.TAG }}
            publisher: ''
            sourceType: grpc
          ```
