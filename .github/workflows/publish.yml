# Generated by internal/ci/ci_tool.cue; do not edit
name: Publish
on:
- issue_comment
env:
  DOCKER_CLI_EXPERIMENTAL: enabled
jobs:
  push:
    name: Push Images to PC
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body,
      '/push-images') }}
    steps:
    - name: Check if user has write access
      uses: lannonbr/repo-permission-check-action@2.0.0
      with:
        permission: write
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - id: pr
      name: Get PR for Comment
      run: |-
        PR=$(curl -H "Accept: application/vnd.github.v3+json" \
             "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.issue.number }}" )
        echo "prSha=$(echo $PR | jq -r ".head.sha")" >> $GITHUB_OUTPUT
        echo "prRef=$(echo $PR | jq -r ".head.ref")" >> $GITHUB_OUTPUT
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ steps.pr.outputs.prSha }}
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
        cache: false
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder Assets
      run: |-
        make envtest
        make source-envtest
    - id: version
      name: Get Version
      run: |-
        make svu
        export VERSION="$(./bin/svu next --prefix '')"

        if [ "$REF" == "" ]; then
        	REF="$GITHUB_REF"
        fi

        if [[ "$GITHUB_HEAD_REF" != "" ]]; then
        	echo "Request is a PR $GITHUB_HEAD_REF is head; is base $GITHUB_BASE_REF is base"
        	REF="$GITHUB_HEAD_REF"
        fi

        echo "Found ref $REF"

        if [[ "$VERSION" == "" ]]; then
        	echo "failed to find version"
        	exit 1
        fi

        if [[ "$REF" == *"release"* ||  "$REF" == *"hotfix"* || "$REF" == *"refs/head/master"* || "$REF" == *"refs/head/develop"* ]] ; then
        echo "using release version and github_run_number"
        export VERSION=${VERSION}-${GITHUB_RUN_NUMBER}
        export TAG="${VERSION}"
        export IS_DEV="false"
        else
        echo "using beta in version"
        export VERSION=${VERSION}-beta.${GITHUB_RUN_NUMBER}
        export TAG="${VERSION}"
        export IS_DEV="true"
        fi

        echo "Found version $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Found tag $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "IS_DEV=$IS_DEV" >> $GITHUB_ENV
        echo "isDev=$IS_DEV" >> $GITHUB_OUTPUT
        echo "REF=$REF" >> $GITHUB_ENV
      env:
        REF: ${{ steps.pr.outputs.prRef }}
    - name: Get Latest Bundle Run
      run: |-
        WORKFLOW_ID=8480641
        BRANCH_BUILD=$(curl \
          -H "Accept: application/vnd.github.v3+json" \
          "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/workflows/$WORKFLOW_ID/runs?branch=$REF&event=push" \
           | jq '.workflow_runs | max_by(.run_number)')

        if [ "$BRANCH_BUILD" == "" ]; then
          echo "failed to get branch build"
          exit 1
        fi

        status=$(echo $BRANCH_BUILD | jq -r ' pffastatus')
        conclusion=$(echo $BRANCH_BUILD | jq -r '.conclusion')

        if [ "$status" != "completed" ] && [ "$conclusion" != "success" ]; then
          echo "$status and $conclusion were not completed and successful"
          exit 1
        fi

        RUN_NUMBER=$(echo $BRANCH_BUILD | jq -r '.run_number')

        export TAG="${VERSION}-${RUN_NUMBER}"
        echo "setting tag to $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
    - name: Checkout code
      uses: actions/checkout@v3
    - id: mirror
      name: Scan images
      run: .github/workflows/scripts/scan_images.sh
      env:
        REDHAT_TOKEN: ${{ secrets.redhat_api_key }}
    - uses: peter-evans/create-or-update-comment@v3
      with:
        comment-id: ${{github.event.comment.id}}
        reactions: rocket
    - if: ${{ failure() }}
      uses: peter-evans/create-or-update-comment@v3
      with:
        comment-id: ${{github.event.comment.id}}
        reactions: "-1"
  publish:
    name: Publish Images
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body,
      '/publish-images')}}
    steps:
    - name: Check if user has write access
      uses: lannonbr/repo-permission-check-action@2.0.0
      with:
        permission: write
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - id: pr
      name: Get PR for Comment
      run: |-
        PR=$(curl -H "Accept: application/vnd.github.v3+json" \
             "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.issue.number }}" )
        echo "prSha=$(echo $PR | jq -r ".head.sha")" >> $GITHUB_OUTPUT
        echo "prRef=$(echo $PR | jq -r ".head.ref")" >> $GITHUB_OUTPUT
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ steps.pr.outputs.prSha }}
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
        cache: false
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder Assets
      run: |-
        make envtest
        make source-envtest
    - id: version
      name: Get Version
      run: |-
        make svu
        export VERSION="$(./bin/svu next --prefix '')"

        if [ "$REF" == "" ]; then
        	REF="$GITHUB_REF"
        fi

        if [[ "$GITHUB_HEAD_REF" != "" ]]; then
        	echo "Request is a PR $GITHUB_HEAD_REF is head; is base $GITHUB_BASE_REF is base"
        	REF="$GITHUB_HEAD_REF"
        fi

        echo "Found ref $REF"

        if [[ "$VERSION" == "" ]]; then
        	echo "failed to find version"
        	exit 1
        fi

        if [[ "$REF" == *"release"* ||  "$REF" == *"hotfix"* || "$REF" == *"refs/head/master"* || "$REF" == *"refs/head/develop"* ]] ; then
        echo "using release version and github_run_number"
        export VERSION=${VERSION}-${GITHUB_RUN_NUMBER}
        export TAG="${VERSION}"
        export IS_DEV="false"
        else
        echo "using beta in version"
        export VERSION=${VERSION}-beta.${GITHUB_RUN_NUMBER}
        export TAG="${VERSION}"
        export IS_DEV="true"
        fi

        echo "Found version $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Found tag $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "IS_DEV=$IS_DEV" >> $GITHUB_ENV
        echo "isDev=$IS_DEV" >> $GITHUB_OUTPUT
        echo "REF=$REF" >> $GITHUB_ENV
      env:
        REF: ${{ steps.pr.outputs.prRef }}
    - name: Get Latest Bundle Run
      run: |-
        WORKFLOW_ID=8480641
        BRANCH_BUILD=$(curl \
          -H "Accept: application/vnd.github.v3+json" \
          "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/workflows/$WORKFLOW_ID/runs?branch=$REF&event=push" \
           | jq '.workflow_runs | max_by(.run_number)')

        if [ "$BRANCH_BUILD" == "" ]; then
          echo "failed to get branch build"
          exit 1
        fi

        status=$(echo $BRANCH_BUILD | jq -r ' pffastatus')
        conclusion=$(echo $BRANCH_BUILD | jq -r '.conclusion')

        if [ "$status" != "completed" ] && [ "$conclusion" != "success" ]; then
          echo "$status and $conclusion were not completed and successful"
          exit 1
        fi

        RUN_NUMBER=$(echo $BRANCH_BUILD | jq -r '.run_number')

        export TAG="${VERSION}-${RUN_NUMBER}"
        echo "setting tag to $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: registry.connect.redhat.com
        username: ${{secrets['REDHAT_IO_USER']}}
        password: ${{secrets['REDHAT_IO_PASSWORD']}}
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Publish Operator Images
      run: |-
        make pc-tool
        ./bin/partner-connect-tool publish --username $RH_USER --password $RH_PASSWORD  --images https://connect.redhat.com/projects/5e98b6fac77ce6fca8ac859c/images,,$TAG --images https://connect.redhat.com/projects/5e98b6fc32116b90fd024d06/images,,$TAG --images https://connect.redhat.com/projects/5f36ea2f74cc50b8f01a838d/images,,$TAG --images https://connect.redhat.com/projects/5f62b71018e80cdc21edf22f/images,,$TAG --images https://connect.redhat.com/projects/61649f78d3e2f8d3bcfe30d5/images,,$TAG --images https://connect.redhat.com/projects/5f68c9457115dbd1183ccab6/images,,$TAG
      env:
        RH_USER: ${{ secrets['REDHAT_IO_USER'] }}
        RH_PASSWORD: ${{ secrets['REDHAT_IO_PASSWORD'] }}
        RH_CONNECT_TOKEN: ${{ secrets.redhat_api_key }}
    - uses: peter-evans/create-or-update-comment@v3
      with:
        comment-id: ${{github.event.comment.id}}
        reactions: rocket
    - if: ${{ failure() }}
      uses: peter-evans/create-or-update-comment@v3
      with:
        comment-id: ${{github.event.comment.id}}
        reactions: "-1"
  push-operator:
    name: Push Operator
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body,
      '/push-operator')}}
    steps:
    - name: Check if user has write access
      uses: lannonbr/repo-permission-check-action@2.0.0
      with:
        permission: write
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - id: pr
      name: Get PR for Comment
      run: |-
        PR=$(curl -H "Accept: application/vnd.github.v3+json" \
             "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.issue.number }}" )
        echo "prSha=$(echo $PR | jq -r ".head.sha")" >> $GITHUB_OUTPUT
        echo "prRef=$(echo $PR | jq -r ".head.ref")" >> $GITHUB_OUTPUT
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ steps.pr.outputs.prSha }}
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
        cache: false
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder Assets
      run: |-
        make envtest
        make source-envtest
    - id: version
      name: Get Version
      run: |-
        make svu
        export VERSION="$(./bin/svu next --prefix '')"

        if [ "$REF" == "" ]; then
        	REF="$GITHUB_REF"
        fi

        if [[ "$GITHUB_HEAD_REF" != "" ]]; then
        	echo "Request is a PR $GITHUB_HEAD_REF is head; is base $GITHUB_BASE_REF is base"
        	REF="$GITHUB_HEAD_REF"
        fi

        echo "Found ref $REF"

        if [[ "$VERSION" == "" ]]; then
        	echo "failed to find version"
        	exit 1
        fi

        if [[ "$REF" == *"release"* ||  "$REF" == *"hotfix"* || "$REF" == *"refs/head/master"* || "$REF" == *"refs/head/develop"* ]] ; then
        echo "using release version and github_run_number"
        export VERSION=${VERSION}-${GITHUB_RUN_NUMBER}
        export TAG="${VERSION}"
        export IS_DEV="false"
        else
        echo "using beta in version"
        export VERSION=${VERSION}-beta.${GITHUB_RUN_NUMBER}
        export TAG="${VERSION}"
        export IS_DEV="true"
        fi

        echo "Found version $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Found tag $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "IS_DEV=$IS_DEV" >> $GITHUB_ENV
        echo "isDev=$IS_DEV" >> $GITHUB_OUTPUT
        echo "REF=$REF" >> $GITHUB_ENV
      env:
        REF: ${{ steps.pr.outputs.prRef }}
    - name: Get Latest Bundle Run
      run: |-
        WORKFLOW_ID=8480641
        BRANCH_BUILD=$(curl \
          -H "Accept: application/vnd.github.v3+json" \
          "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/workflows/$WORKFLOW_ID/runs?branch=$REF&event=push" \
           | jq '.workflow_runs | max_by(.run_number)')

        if [ "$BRANCH_BUILD" == "" ]; then
          echo "failed to get branch build"
          exit 1
        fi

        status=$(echo $BRANCH_BUILD | jq -r ' pffastatus')
        conclusion=$(echo $BRANCH_BUILD | jq -r '.conclusion')

        if [ "$status" != "completed" ] && [ "$conclusion" != "success" ]; then
          echo "$status and $conclusion were not completed and successful"
          exit 1
        fi

        RUN_NUMBER=$(echo $BRANCH_BUILD | jq -r '.run_number')

        export TAG="${VERSION}-${RUN_NUMBER}"
        echo "setting tag to $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: registry.connect.redhat.com
        username: ${{secrets['REDHAT_IO_USER']}}
        password: ${{secrets['REDHAT_IO_PASSWORD']}}
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Copy Manifest
      run: |-
        echo "::group::Push scan.connect.redhat.com/ospid-64f06656-d9d4-43ef-a227-3b9c198800a1/redhat-marketplace-operator-manifest:$TAG"
        skopeo --override-os=linux inspect docker://scan.connect.redhat.com/ospid-64f06656-d9d4-43ef-a227-3b9c198800a1/redhat-marketplace-operator-manifest:$TAG --creds ${{secrets['pcUser']}}:${{secrets['pcPasswordOperatorManifest']}} > /dev/null
        ([[ $? == 0 ]] && echo "exists=true" || skopeo copy docker://quay.io/rh-marketplace/redhat-marketplace-operator-manifest:$TAG docker://scan.connect.redhat.com/ospid-64f06656-d9d4-43ef-a227-3b9c198800a1/redhat-marketplace-operator-manifest:$TAG --dest-creds ${{secrets['pcUser']}}:${{secrets['pcPasswordOperatorManifest']}})
        echo "::endgroup::"
      shell: bash {0}
    - uses: peter-evans/create-or-update-comment@v3
      with:
        comment-id: ${{github.event.comment.id}}
        reactions: rocket
    - if: ${{ failure() }}
      uses: peter-evans/create-or-update-comment@v3
      with:
        comment-id: ${{github.event.comment.id}}
        reactions: "-1"
  publish-operator:
    name: Publish Operator
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body,
      '/operator') }}
    steps:
    - name: Check if user has write access
      uses: lannonbr/repo-permission-check-action@2.0.0
      with:
        permission: write
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - id: pr
      name: Get PR for Comment
      run: |-
        PR=$(curl -H "Accept: application/vnd.github.v3+json" \
             "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.issue.number }}" )
        echo "prSha=$(echo $PR | jq -r ".head.sha")" >> $GITHUB_OUTPUT
        echo "prRef=$(echo $PR | jq -r ".head.ref")" >> $GITHUB_OUTPUT
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ steps.pr.outputs.prSha }}
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
        cache: false
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder Assets
      run: |-
        make envtest
        make source-envtest
    - id: version
      name: Get Version
      run: |-
        make svu
        export VERSION="$(./bin/svu next --prefix '')"

        if [ "$REF" == "" ]; then
        	REF="$GITHUB_REF"
        fi

        if [[ "$GITHUB_HEAD_REF" != "" ]]; then
        	echo "Request is a PR $GITHUB_HEAD_REF is head; is base $GITHUB_BASE_REF is base"
        	REF="$GITHUB_HEAD_REF"
        fi

        echo "Found ref $REF"

        if [[ "$VERSION" == "" ]]; then
        	echo "failed to find version"
        	exit 1
        fi

        if [[ "$REF" == *"release"* ||  "$REF" == *"hotfix"* || "$REF" == *"refs/head/master"* || "$REF" == *"refs/head/develop"* ]] ; then
        echo "using release version and github_run_number"
        export VERSION=${VERSION}-${GITHUB_RUN_NUMBER}
        export TAG="${VERSION}"
        export IS_DEV="false"
        else
        echo "using beta in version"
        export VERSION=${VERSION}-beta.${GITHUB_RUN_NUMBER}
        export TAG="${VERSION}"
        export IS_DEV="true"
        fi

        echo "Found version $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Found tag $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "IS_DEV=$IS_DEV" >> $GITHUB_ENV
        echo "isDev=$IS_DEV" >> $GITHUB_OUTPUT
        echo "REF=$REF" >> $GITHUB_ENV
      env:
        REF: ${{ steps.pr.outputs.prRef }}
    - name: Get Latest Bundle Run
      run: |-
        WORKFLOW_ID=8480641
        BRANCH_BUILD=$(curl \
          -H "Accept: application/vnd.github.v3+json" \
          "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/workflows/$WORKFLOW_ID/runs?branch=$REF&event=push" \
           | jq '.workflow_runs | max_by(.run_number)')

        if [ "$BRANCH_BUILD" == "" ]; then
          echo "failed to get branch build"
          exit 1
        fi

        status=$(echo $BRANCH_BUILD | jq -r ' pffastatus')
        conclusion=$(echo $BRANCH_BUILD | jq -r '.conclusion')

        if [ "$status" != "completed" ] && [ "$conclusion" != "success" ]; then
          echo "$status and $conclusion were not completed and successful"
          exit 1
        fi

        RUN_NUMBER=$(echo $BRANCH_BUILD | jq -r '.run_number')

        export TAG="${VERSION}-${RUN_NUMBER}"
        echo "setting tag to $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: registry.connect.redhat.com
        username: ${{secrets['REDHAT_IO_USER']}}
        password: ${{secrets['REDHAT_IO_PASSWORD']}}
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Publish Operator
      run: |-
        make pc-tool
        ./bin/partner-connect-tool publish --username $RH_USER --password $RH_PASSWORD --is-operator-manifest=true --images https://connect.redhat.com/projects/5f68c9457115dbd1183ccab6/images,,$TAG
      env:
        RH_USER: ${{ secrets['REDHAT_IO_USER'] }}
        RH_PASSWORD: ${{ secrets['REDHAT_IO_PASSWORD'] }}
        RH_CONNECT_TOKEN: ${{ secrets.redhat_api_key }}
    - uses: peter-evans/create-or-update-comment@v3
      with:
        comment-id: ${{github.event.comment.id}}
        reactions: rocket
    - if: ${{ failure() }}
      uses: peter-evans/create-or-update-comment@v3
      with:
        comment-id: ${{github.event.comment.id}}
        reactions: "-1"
