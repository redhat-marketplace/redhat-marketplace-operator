apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: meterbases.marketplace.redhat.com
spec:
  group: marketplace.redhat.com
  names:
    kind: MeterBase
    listKind: MeterBaseList
    plural: meterbases
    singular: meterbase
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: MeterBase is the resource that sets up Metering for Red Hat Marketplace.
        This is an internal resource not meant to be modified directly.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: MeterBaseSpec defines the desired state of MeterBase
          properties:
            enabled:
              description: Is metering is enabled on the cluster? Default is true
              type: boolean
            prometheus:
              description: Prometheus deployment configuration.
              properties:
                resources:
                  description: Resource requirements for the deployment. Default is
                    not defined.
                  properties:
                    limits:
                      additionalProperties:
                        type: string
                      description: 'Limits describes the maximum amount of compute
                        resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                      type: object
                    requests:
                      additionalProperties:
                        type: string
                      description: 'Requests describes the minimum amount of compute
                        resources required. If Requests is omitted for a container,
                        it defaults to Limits if that is explicitly specified, otherwise
                        to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                      type: object
                  type: object
                selector:
                  additionalProperties:
                    type: string
                  description: Selector for the pods in the Prometheus deployment
                  type: object
                storage:
                  description: Storage for the deployment.
                  properties:
                    class:
                      description: Storage class for the prometheus stateful set.
                        Default is "" i.e. default.
                      type: string
                    size:
                      description: Storage size for the prometheus deployment. Default
                        is 40Gi.
                      format: quantity
                      type: string
                  type: object
              required:
              - storage
              type: object
          required:
          - enabled
          type: object
        status:
          description: MeterBaseStatus defines the observed state of MeterBase.
          properties:
            conditions:
              additionalProperties:
                description: "Condition represents an observation of an object's state.
                  Conditions are an extension mechanism intended to be used when the
                  details of an observation are not a priori known or would not apply
                  to all instances of a given Kind. \n Conditions should be added
                  to explicitly convey properties that users and components care about
                  rather than requiring those properties to be inferred from other
                  observations. Once defined, the meaning of a Condition can not be
                  changed arbitrarily - it becomes part of the API, and has the same
                  backwards- and forwards-compatibility concerns of any other part
                  of the API."
                properties:
                  lastTransitionTime:
                    format: date-time
                    type: string
                  message:
                    type: string
                  reason:
                    description: ConditionReason is intended to be a one-word, CamelCase
                      representation of the category of cause of the current status.
                      It is intended to be used in concise output, such as one-line
                      kubectl get output, and in summarizing occurrences of causes.
                    type: string
                  status:
                    type: string
                  type:
                    description: "ConditionType is the type of the condition and is
                      typically a CamelCased word or short phrase. \n Condition types
                      should indicate state in the \"abnormal-true\" polarity. For
                      example, if the condition indicates when a policy is invalid,
                      the \"is valid\" case is probably the norm, so the condition
                      should be called \"Invalid\"."
                    type: string
                required:
                - status
                - type
                type: object
              description: MeterBaseConditions represent the latest available observations
                of an object's stateonfig
              type: array
            prometheusStatus:
              description: PrometheusStatus is the most recent observed status of
                the Prometheus cluster. Read-only. Not included when requesting from
                the apiserver, only from the Prometheus
              properties:
                availableReplicas:
                  description: Total number of available pods (ready for at least
                    minReadySeconds) targeted by this Prometheus deployment.
                  format: int32
                  type: integer
                paused:
                  description: Represents whether any actions on the underlaying managed
                    objects are being performed. Only delete actions will be performed.
                  type: boolean
                replicas:
                  description: Total number of non-terminated pods targeted by this
                    Prometheus deployment (their labels match the selector).
                  format: int32
                  type: integer
                unavailableReplicas:
                  description: Total number of unavailable pods targeted by this Prometheus
                    deployment.
                  format: int32
                  type: integer
                updatedReplicas:
                  description: Total number of non-terminated pods targeted by this
                    Prometheus deployment that have the desired version spec.
                  format: int32
                  type: integer
              required:
              - availableReplicas
              - paused
              - replicas
              - unavailableReplicas
              - updatedReplicas
              type: object
          required:
          - conditions
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
